{
    "swagger": "2.0",
    "info": {
        "description": "GSW - API documentation",
        "version": "1.0.0",
        "title": "Swagger UI - Golden State",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:3000",
    "basePath": "",
    "tags": [
        {
            "name": "User",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about User model",
                "url": "https://gsw2018.atlassian.net/wiki/spaces/MIC/pages/73007105/User+Profile+Model+and+Statuses"
            }
        },
        {
            "name": "NBA",
            "description": "Operations that extends to the NBA API",
            "externalDocs": {
                "description": "PDF about NBA API",
                "url": "https://gsw2018.atlassian.net/wiki/spaces/MIC/overview?preview=/2097344/80281676/nba_mobile_stats_feed_-_v2016__1_.pdf"
            }
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "consumes": "application/json",
    "produces": "application/json",
    "paths": {
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get all Users",
                "description": "Get all Users.",
                "operationId": "getAllUsers",
                "responses": {
                    "200": {
                        "description": "A list of all users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/User"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    },
                    "default": {
                        "description": "A list of all users from the database"
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create user",
                "description": "Create a user through the client APP",
                "operationId": "createUser",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Create a new user and add them to the database",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/definitions/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. User ID must be an integer and larger than 0"
                    },
                    "401": {
                        "description": "Authorization information is missing or invalid."
                    },
                    "404": {
                        "description": "A user with the specified ID was not found."
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    },
                    "default": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/id={id}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user by user id",
                "description": "Supply user unique ID and return proper json",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id of the user to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed"
                    },
                    "400": {
                        "description": "Invalid id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/email={email}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user by user email",
                "description": "Supply user unique object and return proper json",
                "operationId": "getUserByEmail",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email of the user that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user by email",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUserByEmail",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email of the user that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed"
                    },
                    "400": {
                        "description": "Invalid email supplied"
                    },
                    "404": {
                        "description": "Email not found"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Succesful Login request from firebase after authentication to store session in Redis",
                "description": "This",
                "operationId": "login",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email of the user that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid user credentials supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Removes the session from redis",
                "description": "Request from the client to log out, deleting the session from the redis server",
                "operationId": "logout",
                "parameters": [
                    {
                        "name": "x-gsw-session-token",
                        "in": "header",
                        "description": "The session token created by the Firebase service when loging in",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/users/is_ticket_holder": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Return team statistics",
                "description": "Return team statistics",
                "operationId": "getStatistic",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ResponseObject"
                        }
                    },
                    "400": {
                        "description": "Invalid token or invalid ID"
                    },
                    "404": {
                        "description": "No Season ticket holder status"
                    }
                }
            }
        },
        "/nba/standings": {
            "get": {
                "tags": [
                    "Standings"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/nba/stats": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    }
                }
            }
        },
        "/nba/game_trackers/detail/game={gameId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "Return a game's score data.",
                "description": "Return a game's top score, its teams' win-loss ratio, quarter by quarter score, and the comparation of the teams stats.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "description": "Retrieve Game details"
                    }
                ],
                "operationId": "getGameDetail",
                "responses": {
                    "200": {
                        "description": "Returned game data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "GameTrackerDetail"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Game ID not found"
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/nba/game_trackers/detail/team_stats/game={gameId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "@TODO",
                "description": "@TODO",
                "parameters": [
                    {
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "@TODO"
                    }
                ],
                "operationId": "@TODO",
                "responses": {
                    "200": {
                        "description": "@TODO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "@TODO"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "@TODO"
                    }
                }
            }
        },
        "/nba/game_trackers/top_scores/game={gameId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "@TODO",
                "description": "@TODO",
                "parameters": [
                    {
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "@TODO"
                    }
                ],
                "operationId": "@TODO",
                "responses": {
                    "200": {
                        "description": "@TODO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "@TODO"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "@TODO"
                    }
                }
            }
        },
        "/nba/game_trackers/top_scores/scores/game={gameId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "@TODO",
                "description": "@TODO",
                "parameters": [
                    {
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "@TODO"
                    }
                ],
                "operationId": "@TODO",
                "responses": {
                    "200": {
                        "description": "@TODO",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "@TODO"
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "@TODO"
                    }
                }
            }
        },
        "/nba/game_trackers/top-scores/win-loss/team={teamId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "Get the number of wins and losses",
                "description": "Get the number of wins and losses per TeamId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "teamId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "GameId"
                    }
                ],
                "operationId": "getWinLoss",
                "responses": {
                    "200": {
                        "description": "Get number of wins and losses",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": ""
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "@TODO"
                    }
                }
            }
        },
        "/nba/game_trackers/qbq/game={gameId}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "Get quarter by quarter score",
                "description": "Get the quarter by quarter score by the game Id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "gameId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Get gameId"
                    }
                ],
                "operationId": "getQBQ",
                "responses": {
                    "200": {
                        "description": "Return quarter by quarter score",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": ""
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/nba/game_trackers/team/leaders/home={homeTeamName}&away={awayTeamName}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "Get the top player with highest score in the game",
                "description": "Get top player with highest score in the game by home team name and away team name",
                "parameters": [
                    {
                        "in": "path",
                        "name": "homeTeamName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "get home team name"
                    },
                    {
                        "in": "path",
                        "name": "awayTeamName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "get away team name"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return team leader",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": ""
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    },
                    "default": {
                        "description": "Team standings"
                    }
                }
            }
        },
        "/nba/game_trackers/team/stats/home={homeTeamName}&away={awayTeamName}": {
            "get": {
                "tags": [
                    "GameTrackers"
                ],
                "summary": "Get the team statistics",
                "description": "Get the team statistics by Home and Away team names",
                "parameters": [
                    {
                        "in": "path",
                        "name": "homeTeamName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Get home team name"
                    },
                    {
                        "in": "path",
                        "name": "awayTeamName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Get away team name"
                    }
                ]
            }
        },
        "/nba/standings/conference={confName}&season={seasonId}": {
            "get": {
                "tags": [
                    "Standings"
                ],
                "parameters":[
                {
                    "in": "path",
                    "name": "confName",
                    "required": true,
                    "schema":{
                        "type": "string"
                    }
                },
                {
                    "in": "path",
                    "name": "seasonId",
                    "required": true,
                    "schema":{
                        "type": "integer"
                    }
                }
                ],
                "responses": {
                    "200": {
                        "description": "Team standings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": ""
                                }
                            }
                        }
                    },
                    "5XX": {
                        "description": "Unexpected error"
                    },
                    "default": {
                        "description": "Team standings"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions": {
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "socialAccount": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "socialAccount": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "paymentMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "phoneNumber": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "zipCode": {
                        "type": "string"
                    },
                    "timeZone": {
                        "type": "string"
                    },
                    "profilePhoto": {
                        "type": "string"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isSeasonTicketHolder": {
                        "type": "boolean"
                    },
                    "isMediaMember": {
                        "type": "boolean"
                    },
                    "inBayArea": {
                        "type": "boolean"
                    },
                    "savedEvents": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preferences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "orderHistory": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "xml": {
                    "name": "User"
                }
            },
            "Tag": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "xml": {
                    "name": "Tag"
                }
            },
            "gameTracker": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "modules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "data": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "xml": {
                    "name": "GameTrackerDetail"
                }
            },
            "ApiResponse": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "type": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            }
        },
        "externalDocs": {
            "description": "Find out more about Swagger",
            "url": "http://swagger.io"
        }
    }
}
